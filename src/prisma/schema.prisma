// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   Boolean?  @default(true)
  verificationCode String? @default("")
  hashedPassword  String?
  image           String? @default("")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isContractor    Boolean? @default(false)
  isAdmin         Boolean? @default(false)

  accounts Account[]
  dumps Dump[]
  assignedDumps Dump[] @relation("assignedDumps")
  completedDumps Dump[] @relation("completedDumps")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  refresh_token_expires_in Int?
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Dump {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  location        String
  image           String
  completed       Boolean @default(false)

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  assignedToId String? @db.ObjectId
  assignedTo User? @relation("assignedDumps", fields: [assignedToId], references: [id], onDelete: SetNull)

  completedById String? @db.ObjectId
  completedBy User? @relation("completedDumps", fields: [completedById], references: [id], onDelete: SetNull)
}
